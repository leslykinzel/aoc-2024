import unittest
from main import *

operators = [ '+', '*', '||' ]
targets = [190, 3267, 83, 156, 7290, 161011, 192, 21037, 292]
factors = [
    [10, 19],
    [81, 40, 27],
    [17, 5],
    [15, 6],
    [6, 8, 6, 15],
    [16, 10, 13],
    [17, 8, 14],
    [9, 7, 18, 13],
    [11, 6, 16, 20]
]

class TestListProcessing(unittest.TestCase):

    def test_get_all_possible_expressions(self):
        '''
            Given a list of integers, get_all_possible_expressions() should return 
            a list of possible expressions based on the operators passed by the caller.
        '''
        expected = [
            [[10, '+', 19], [10, '*', 19], [10, '||', 19]], 
            [[81, '+', 40, '+', 27], [81, '+', 40, '*', 27], [81, '+', 40, '||', 27], [81, '*', 40, '+', 27], [81, '*', 40, '*', 27], [81, '*', 40, '||', 27], [81, '||', 40, '+', 27], [81, '||', 40, '*', 27], [81, '||', 40, '||', 27]], 
            [[17, '+', 5], [17, '*', 5], [17, '||', 5]], [[15, '+', 6], [15, '*', 6], [15, '||', 6]], 
            [[6, '+', 8, '+', 6, '+', 15], [6, '+', 8, '+', 6, '*', 15], [6, '+', 8, '+', 6, '||', 15], [6, '+', 8, '*', 6, '+', 15], [6, '+', 8, '*', 6, '*', 15], [6, '+', 8, '*', 6, '||', 15], [6, '+', 8, '||', 6, '+', 15], [6, '+', 8, '||', 6, '*', 15], [6, '+', 8, '||', 6, '||', 15], [6, '*', 8, '+', 6, '+', 15], [6, '*', 8, '+', 6, '*', 15], [6, '*', 8, '+', 6, '||', 15], [6, '*', 8, '*', 6, '+', 15], [6, '*', 8, '*', 6, '*', 15], [6, '*', 8, '*', 6, '||', 15], [6, '*', 8, '||', 6, '+', 15], [6, '*', 8, '||', 6, '*', 15], [6, '*', 8, '||', 6, '||', 15], [6, '||', 8, '+', 6, '+', 15], [6, '||', 8, '+', 6, '*', 15], [6, '||', 8, '+', 6, '||', 15], [6, '||', 8, '*', 6, '+', 15], [6, '||', 8, '*', 6, '*', 15], [6, '||', 8, '*', 6, '||', 15], [6, '||', 8, '||', 6, '+', 15], [6, '||', 8, '||', 6, '*', 15], [6, '||', 8, '||', 6, '||', 15]], 
            [[16, '+', 10, '+', 13], [16, '+', 10, '*', 13], [16, '+', 10, '||', 13], [16, '*', 10, '+', 13], [16, '*', 10, '*', 13], [16, '*', 10, '||', 13], [16, '||', 10, '+', 13], [16, '||', 10, '*', 13], [16, '||', 10, '||', 13]], 
            [[17, '+', 8, '+', 14], [17, '+', 8, '*', 14], [17, '+', 8, '||', 14], [17, '*', 8, '+', 14], [17, '*', 8, '*', 14], [17, '*', 8, '||', 14], [17, '||', 8, '+', 14], [17, '||', 8, '*', 14], [17, '||', 8, '||', 14]], 
            [[9, '+', 7, '+', 18, '+', 13], [9, '+', 7, '+', 18, '*', 13], [9, '+', 7, '+', 18, '||', 13], [9, '+', 7, '*', 18, '+', 13], [9, '+', 7, '*', 18, '*', 13], [9, '+', 7, '*', 18, '||', 13], [9, '+', 7, '||', 18, '+', 13], [9, '+', 7, '||', 18, '*', 13], [9, '+', 7, '||', 18, '||', 13], [9, '*', 7, '+', 18, '+', 13], [9, '*', 7, '+', 18, '*', 13], [9, '*', 7, '+', 18, '||', 13], [9, '*', 7, '*', 18, '+', 13], [9, '*', 7, '*', 18, '*', 13], [9, '*', 7, '*', 18, '||', 13], [9, '*', 7, '||', 18, '+', 13], [9, '*', 7, '||', 18, '*', 13], [9, '*', 7, '||', 18, '||', 13], [9, '||', 7, '+', 18, '+', 13], [9, '||', 7, '+', 18, '*', 13], [9, '||', 7, '+', 18, '||', 13], [9, '||', 7, '*', 18, '+', 13], [9, '||', 7, '*', 18, '*', 13], [9, '||', 7, '*', 18, '||', 13], [9, '||', 7, '||', 18, '+', 13], [9, '||', 7, '||', 18, '*', 13], [9, '||', 7, '||', 18, '||', 13]], 
            [[11, '+', 6, '+', 16, '+', 20], [11, '+', 6, '+', 16, '*', 20], [11, '+', 6, '+', 16, '||', 20], [11, '+', 6, '*', 16, '+', 20], [11, '+', 6, '*', 16, '*', 20], [11, '+', 6, '*', 16, '||', 20], [11, '+', 6, '||', 16, '+', 20], [11, '+', 6, '||', 16, '*', 20], [11, '+', 6, '||', 16, '||', 20], [11, '*', 6, '+', 16, '+', 20], [11, '*', 6, '+', 16, '*', 20], [11, '*', 6, '+', 16, '||', 20], [11, '*', 6, '*', 16, '+', 20], [11, '*', 6, '*', 16, '*', 20], [11, '*', 6, '*', 16, '||', 20], [11, '*', 6, '||', 16, '+', 20], [11, '*', 6, '||', 16, '*', 20], [11, '*', 6, '||', 16, '||', 20], [11, '||', 6, '+', 16, '+', 20], [11, '||', 6, '+', 16, '*', 20], [11, '||', 6, '+', 16, '||', 20], [11, '||', 6, '*', 16, '+', 20], [11, '||', 6, '*', 16, '*', 20], [11, '||', 6, '*', 16, '||', 20], [11, '||', 6, '||', 16, '+', 20], [11, '||', 6, '||', 16, '*', 20], [11, '||', 6, '||', 16, '||', 20]]
        ]

        for i in range(len(factors)):
            self.assertEqual(get_all_possible_expressions(factors[i], operators), expected[i])

    def test_eval_concat_operator(self):
        '''
            If the expression contains a || operator, the values
            around it must be combined. e.g. [ 10, '||', 19, '+', 5 ] -> [ 1019, '+', 5 ]
        '''
        test_cases = [
            [10, '||', 19],
            [9, '+', 7, '+', 18, '||', 13],
            [11, '||', 6, '||', 16, '||', 20],
            [17, '*', 5],
            [9, '||', 7, '||', 18, '+', 13]
        ]
        expected = [
            [1019],
            [9, '+', 7, '+', 1813],
            [1161620],
            [17, '*', 5],
            [9718, '+', 13]
        ]

        for i in range(len(test_cases)):
            print(f'Expected:{expected[i]}')
            print(f'Actual: {eval_concat_operator(test_cases[i])}')
            self.assertEqual(eval_concat_operator(test_cases[i]), expected[i])


if __name__ == '__main__':
    unittest.main()
